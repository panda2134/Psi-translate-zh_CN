f# MISC
itemGroup.Psi=Psi

psimisc.componentType=&a组件类型&7: %s
psimisc.shiftForInfo=&7按住 &bSHIFT&7 获得更多信息
psimisc.none=(none)
psimisc.stats=总计
psimisc.socketing=接口
psimisc.keybind=Psi主热键绑定
psimisc.spellSelected=&d术式选择&7: %s
psimisc.name=术式名:
psimisc.compiled=编辑成功
psimisc.errored=编辑出错
psimisc.weakCad=你的CAD的数据太弱不能驱动魔法
psimisc.constant=常数
psimisc.nextPage=下一页
psimisc.prevPage=上一页
psimisc.config=配置
psimisc.notYourProgrammer=似乎有其他人正在使用这个，最好不要干扰它。
psimisc.cantUseProgrammer=你不知道如何操作它
psimisc.levelDisplay=等级 %d
psimisc.levelInfo=Level %d - 升级点数: %d
psimisc.levelInfoCreative=等级 %d (创造模式) - 升级点数: %d
psimisc.locked=锁定
psimisc.requirements=要求
psimisc.learn=学习
psimisc.levelup=Level Up
psimisc.wip=Psi Beta | Not final!
psimisc.bulletType=&b类型&7: %s
psimisc.bulletCost=&bCost Multiplier&7: %s%%
psimisc.levelUpInfo1=你获得了一个升级点数
psimisc.levelUpInfo2=脱下你的CAD然后按下 [%s] 来使用它!
psimisc.importFromClipboard=从剪贴板导入
psimisc.exportToClipboard=导出至剪贴板
psimisc.mustHoldShift=(必须按住SHIFT)
psimisc.malformedJson=导入错误：错误格式的字符串
psimisc.missingPieces=导入错误: 缺少用于输入魔法的元件
psimisc.loadPrompt=Load?
psimisc.spectator=[观察者模式]
psimisc.multipleCads=在你的背包中其他的CAD正在干扰你的动作。你一次只能拥有一个CAD。
psimisc.providerMod=&7Addon: &9%s

# VERSIONING
psi.versioning.flavour0=似乎Psi过时了。多么可惜、
psi.versioning.flavour1=你是否激动于更新Psi?
psi.versioning.flavour2=Psi过时了。你期望有一个有趣的消息，但它刚刚过时了, sorry :(
psi.versioning.flavour3=你可以下载新的Psi升级从魔法科高中的服务器
psi.versioning.flavour4=Psi过时了。另一方面，你可以升级它
psi.versioning.flavour5=只有二科生留下了过时的Psi。
psi.versioning.flavour6=不要做一个Psicho，升级Psi。
psi.versioning.flavour7=Psi最新版。Psiche！我骗你的。
psi.versioning.flavour8=你需要升级Psi，从网站上来得到它。
psi.versioning.flavour9=不要把自己当作一个Psiduck，升级Psi。
psi.versioning.outdated=你正在运行Psi build %s，最新版本是build %s.
psi.versioning.updateMessage=["Click for... [",{"text":"Download","color":"aqua","hoverEvent":{"action":"show_text","value":{"text":"Click this to automatically download the latest version","color":"aqua"}},"clickEvent":{"action":"run_command","value":"/psi-download-latest %version%"}},"] [",{"text":"Website","color":"aqua","hoverEvent":{"action":"show_text","value":{"text":"Click this to go to the mod's website","color":"aqua"}},"clickEvent":{"action":"open_url","value":"http://psi.vazkii.us/downloads.php"}},"] [",{"text":"Changelog","color":"aqua","hoverEvent":{"action":"show_text","value":{"text":"Click this to go to the version's Changelog","color":"aqua"}},"clickEvent":{"action":"open_url","value":"http://psi.vazkii.us/changelog.php#%version%"}},"]"]
psi.versioning.startingDownload=[{"text":"Starting download of %s. Please do not remove your hard disk. Enjoying ","color":"yellow"},{"text":"Psi","color":"aqua"},{"text":"? Consider supporting ","color":"yellow"},{"text":"Vazkii","color":"light_purple"},{"text":" on ","color":"yellow"},{"text":"[Patreon]","color":"gold","hoverEvent":{"action":"show_text","value":{"text":"Click this to go to Vazkii's Patreon","color":"light_purple"}},"clickEvent":{"action":"open_url","value":"http://www.patreon.com/Vazkii"}},{"text":"!","color":"yellow"}]
psi.versioning.doneDownloading=%s下载完成，删除旧的Psi .jar然后重新载入你的游戏。
psi.versioning.downloadedAlready你已经下载了最新的版本。关掉你的游戏，从你的mods文件夹里删除旧的版本并且再加载它一遍来升级。
psi.versioning.downloadingAlready=新的版本已经下载，给它一些时间，你会的吧？
psi.versioning.error=哇！似乎有什么东西在下载新版本Psi出错了。是从psi.vazkii.us下载的吗？
psi.versioning.disabled=对不起。这项功能目前由于服务器主机问题而被禁用，它很快就会回来。

# BLOCK NAMES
tile.psi:cadAssembler.name=CAD组装器
tile.psi:programmer.name=魔法编程器
tile.psi:psidust_block.name=Psi粉尘块
tile.psi:psimetal_block.name=Psi金属块
tile.psi:psigem_block.name=Psi水晶块
tile.psi:psimetal_plate_black.name=黑暗Psi金属板
tile.psi:psimetal_plate_black_light.name=黑暗Psi金属流光板
tile.psi:psimetal_plate_cyan.name=光明Psi金属板
tile.psi:psimetal_plate_cyan_light.name=光明Psi金属流光板
tile.psi:ebony_psimetal_block.name=黑檀木Psi金属块
tile.psi:ivory_psimetal_block.name=白象牙Psi金属块
tile.psi:conjured.name=召唤方块

# ITEM NAMES
item.psi:psidust.name=Psi尘土
item.psi:psimetal.name=Psi金属锭
item.psi:psigem.name=Psi水晶
item.psi:ebonyPsimetal.name=黑檀木Psi金属锭
item.psi:ivoryPsimetal.name=白象牙Psi金属锭
item.psi:ebonySubstance.name=黑檀木物质
item.psi:ivorySubstance.name=白象牙物质
item.psi:cad.name=CAD
item.psi:cadAssemblyIron.name=铁CAD部件
item.psi:cadAssemblyGold.name=金CAD部件
item.psi:cadAssemblyPsimetal.name=Psi金属CAD部件
item.psi:cadAssemblyEbonyPsimetal.name=黑檀木Psi金属CAD部件
item.psi:cadAssemblyIvoryPsimetal.name=白象牙Psi金属CAD部件
item.psi:cadAssemblyCreative.name创造模式CAD部件
item.psi:cadCoreBasic.name=基础CAD核心
item.psi:cadCoreOverclocked.name=超频CAD核心
item.psi:cadCoreConductive.name=导电CAD核心
item.psi:cadCoreHyperclocked.name=水冷CAD核心
item.psi:cadCoreRadiative.name=辐射CAD核心
item.psi:cadSocketBasic.name=基础CAD接口
item.psi:cadSocketSignaling.name=信素CAD接口
item.psi:cadSocketLarge.name=大号CAD接口
item.psi:cadSocketTransmissive.name=透射CAD接口
item.psi:cadSocketHuge.name=巨型CAD接口
item.psi:cadBatteryBasic.name=基础CAD电池
item.psi:cadBatteryExtended.name=拓展CAD电池
item.psi:cadBatteryUltradense.name=高密度CAD电池
item.psi:cadColorizerWhite.name=白色CAD着色器
item.psi:cadColorizerOrange.name=橙色CAD着色器
item.psi:cadColorizerMagenta.name=品红色CAD着色器
item.psi:cadColorizerLightBlue.name=淡蓝色CAD着色器
item.psi:cadColorizerYellow.name=黄色CAD着色器
item.psi:cadColorizerLime.name=黄绿色CAD着色器
item.psi:cadColorizerPink.name=粉红色CAD着色器
item.psi:cadColorizerGray.name=灰色CAD着色器
item.psi:cadColorizerSilver.name=淡灰色CAD着色器
item.psi:cadColorizerCyan.name=青色CAD着色器
item.psi:cadColorizerPurple.name=紫色CAD着色器
item.psi:cadColorizerBlue.name=蓝色CAD着色器
item.psi:cadColorizerBrown.name=棕色CAD着色器
item.psi:cadColorizerGreen.name=绿色CAD着色器
item.psi:cadColorizerRed.name=红色CAD着色器
item.psi:cadColorizerBlack.name=黑色CAD着色器
item.psi:cadColorizerRainbow.name=全色谱CAD着色器
item.psi:cadColorizerPsi.name=Psi CAD着色器
item.psi:spellBullet.name=魔力子弹
item.psi:spellBulletActive.name=已编程魔力子弹
item.psi:spellBulletProjectile.name=抛射魔力子弹
item.psi:spellBulletProjectileActive.name=已编程抛射魔力子弹
item.psi:spellBulletLoop.name=随身法阵魔力子弹
item.psi:spellBulletLoopActive.name=已编程随身法阵魔力子弹
item.psi:spellBulletCircle.name=圆环法阵魔力子弹
item.psi:spellBulletCircleActive.name=已编程圆环法阵魔力子弹
item.psi:spellBulletGrenade.name=榴弹魔力子弹
item.psi:spellBulletGrenadeActive.name=已编程榴弹魔力子弹
item.psi:spellBulletCharge.name=电荷魔力子弹
item.psi:spellBulletChargeActive.name=已编程电荷魔力子弹
item.psi:spellBulletMine.name=挖掘型魔力子弹
item.psi:spellBulletMineActive.name=已编程挖掘型魔力子弹
item.psi:spellDrive.name=魔法驱动器
item.psi:psimetalShovel.name=Psi金属铲
item.psi:psimetalPickaxe.name=Psi金属镐
item.psi:psimetalAxe.name=Psi金属斧
item.psi:psimetalSword.name=Psi金属剑
item.psi:detonator.name=魔法炸药
item.psi:psimetalExosuitHelmet.name=Psi金属头盔
item.psi:psimetalExosuitChestplate.name=Psi金属护甲
item.psi:psimetalExosuitLeggings.name=Psi金属护腿
item.psi:psimetalExosuitBoots.name=Psi金属鞋
item.psi:exosuitController.name=护甲控制器
item.psi:exosuitSensorLight.name=护甲光亮传感器
item.psi:exosuitSensorWater.name=护甲水传感器
item.psi:exosuitSensorHeat.name=护甲温度传感器
item.psi:exosuitSensorStress.name=护甲应力传感器
item.psi:vectorRuler.name=向量尺

# DEATH MESSAGES
death.attack.psi-overload=%s Psi能量溢出

# COMPONENT NAMES
psi.component.assembly=部件
psi.component.core=核心
psi.component.socket=接口
psi.component.battery=电池
psi.component.dye=着色器

# CAD STAT NAMES
psi.cadstat.efficiency=效率
psi.cadstat.potency=效力
psi.cadstat.complexity=复杂度
psi.cadstat.projection=投射
psi.cadstat.bandwidth=带宽
psi.cadstat.sockets=接口
psi.cadstat.overflow=溢出

# SPELL STAT NAMES
psi.spellstat.complexity=复杂度
psi.spellstat.complexity.desc=动作量
psi.spellstat.potency=效力
psi.spellstat.potency.desc=术式消耗能量
psi.spellstat.cost=消耗
psi.spellstat.cost.desc=Psi零件消耗
psi.spellstat.projection=投射
psi.spellstat.projection.desc=魔法量
psi.spellstat.bandwidth=带宽
psi.spellstat.bandwidth.desc=术式的宽度或长度(最大值)

# BULLET TYPES
psi.bulletType0=普通
psi.bulletType1=抛射
psi.bulletType2=随身法阵
psi.bulletType3=圆环法阵
psi.bulletType4=榴弹
psi.bulletType5=电荷
psi.bulletType6=挖掘型

# EXOSUIT EVENTS
psi.event.none=(没有事件处理程序)
psi.event.damage=&b事件&7: 伤害
psi.event.tick=&b事件&7: 刻
psi.event.jump=&b事件&7: 跳跃
psi.event.lowLight=&b事件&7: 低亮度
psi.event.underwater=&b事件&7: 水下
psi.event.onFire=&b事件&7: 灼烧
psi.event.lowHp=&b事件&7: 低血量

# SPELl PIECE NAMES
# -- SELECTORS
psi.spellpiece.selectorCaster=选择: 魔法师
psi.spellpiece.selectorCaster.desc=选择正在进行法术的人
psi.spellpiece.selectorFocalPoint=选择: 焦点
psi.spellpiece.selectorFocalPoint.desc=选择法术焦点实体
psi.spellpiece.selectorNearbyItems=选择: 最近的物品
psi.spellpiece.selectorNearbyItems.desc=选择离给予坐标最近物品
psi.spellpiece.selectorNearbyLiving=选择: 最近的生物
psi.spellpiece.selectorNearbyLiving.desc=选择离给予坐标最近生物
psi.spellpiece.selectorNearbyEnemies=选择: 最近的敌对生物
psi.spellpiece.selectorNearbyEnemies.desc=选择离给予坐标最近敌对生物
psi.spellpiece.selectorNearbyAnimals=选择: 最近的动物
psi.spellpiece.selectorNearbyAnimals.desc=选择离给予坐标最近动物
psi.spellpiece.selectorNearbyProjectiles=选择: 最近的弹射物
psi.spellpiece.selectorNearbyProjectiles.desc=选择离给予坐标最近弹射物
psi.spellpiece.selectorNearbySmeltables=选择: 最近的容器
psi.spellpiece.selectorNearbySmeltables.desc=选择离给予坐标最近容器
psi.spellpiece.selectorLoopcastIndex=选择: 随身法阵指数
psi.spellpiece.selectorLoopcastIndex.desc=选择随身法杖完成的工作量
psi.spellpiece.selectorBlockBroken=选择: 方块破坏
psi.spellpiece.selectorBlockBroken.desc=选择破坏方块(由于工具)
psi.spellpiece.selectorBlockSideBroken=选择: 方块破坏面
psi.spellpiece.selectorBlockSideBroken.desc=选择方块被破坏的一面(由于工具)
psi.spellpiece.selectorAttackTarget=选择: 攻击目标
psi.spellpiece.selectorAttackTarget.desc=选择正在被攻击的实体
psi.spellpiece.selectorSneakStatus=选择: 潜行状态
psi.spellpiece.selectorSneakStatus.desc=选择是否魔法师在潜行(1为否，0为是)
psi.spellpiece.selectorTime=选择: 时间
psi.spellpiece.selectorTime.desc=选择世界时间(时间刻)
psi.spellpiece.selectorAttacker=选择: 攻击者
psi.spellpiece.selectorAttacker.desc=选择正在攻击魔法师的实体
psi.spellpiece.selectorDamageTaken=选择: 伤害量
psi.spellpiece.selectorDamageTaken.desc=选择魔法师所受的伤害量
psi.spellpiece.selectorRulerVector=选择: 向量尺 
psi.spellpiece.selectorRulerVector.desc=通过向量尺选择一个定义向量

# -- OPERATORS
psi.spellpiece.operatorSum=计算: 标量和
psi.spellpiece.operatorSum.desc=A + B (+ C)
psi.spellpiece.operatorSubtract=计算: 标量差
psi.spellpiece.operatorSubtract.desc=A - B (- C)
psi.spellpiece.operatorMultiply=计算: 标量积
psi.spellpiece.operatorMultiply.desc=A * B (* C)
psi.spellpiece.operatorDivide=计算: 标量商
psi.spellpiece.operatorDivide.desc=A / B
psi.spellpiece.operatorAbsolute=计算: 绝对值
psi.spellpiece.operatorAbsolute.desc=计算绝对值
psi.spellpiece.operatorInverse=计算: 相反数
psi.spellpiece.operatorInverse.desc计算相反数
psi.spellpiece.operatorModulus=计算: 系数
psi.spellpiece.operatorModulus.desc=A % B (整数)
psi.spellpiece.operatorIntegerDivide=计算: 整除
psi.spellpiece.operatorIntegerDivide.desc=A / B (整数)
psi.spellpiece.operatorRandom=计算: 随机数
psi.spellpiece.operatorRandom.desc=随机一个从0到所给数字的数
psi.spellpiece.operatorSin=计算: 正弦
psi.spellpiece.operatorSin.desc=sin(A)
psi.spellpiece.operatorCos=计算: 余弦
psi.spellpiece.operatorCos.desc=cos(A)
psi.spellpiece.operatorAsin=计算: 反正弦
psi.spellpiece.operatorAsin.desc=asin(A)
psi.spellpiece.operatorAcos=计算: 反余弦
psi.spellpiece.operatorAcos.desc=acos(A)
psi.spellpiece.operatorMax=计算: 最大值
psi.spellpiece.operatorMax.desc=所有输入数字最大值
psi.spellpiece.operatorMin=计算: 最小值
psi.spellpiece.operatorMin.desc=所有输入数字最小值
psi.spellpiece.operatorEntityPosition=计算: 实体坐标
psi.spellpiece.operatorEntityPosition.desc=获取一个实体的坐标
psi.spellpiece.operatorEntityLook=计算: 实体观察方向
psi.spellpiece.operatorEntityLook.desc=获取一个实体的观察方向
psi.spellpiece.operatorEntityMotion=计算: 实体运动方向
psi.spellpiece.operatorEntityMotion.desc=获取一个实体运动方向
psi.spellpiece.operatorEntityAxialLook=计算: 实体观察方向(坐标方向)
psi.spellpiece.operatorEntityAxialLook.desc=获取一个实体观察方向(坐标方向)
psi.spellpiece.operatorFocusedEntity=计算: 聚焦实体
psi.spellpiece.operatorFocusedEntity.desc=获取目标实体正在寻找实体
psi.spellpiece.operatorVectorRaycast=计算: 矢量光线
psi.spellpiece.operatorVectorRaycast.desc= (最大值32)
psi.spellpiece.operatorVectorRaycastAxis=计算: 矢量光线（坐标方向）
psi.spellpiece.operatorVectorRaycastAxis.desc=获取局部射线效果(坐标方向)(最大值32)
psi.spellpiece.operatorVectorSum=计算: 向量和
psi.spellpiece.operatorVectorSum.desc=A + B (+ C)
psi.spellpiece.operatorVectorSubtract=计算: 向量差
psi.spellpiece.operatorVectorSubtract.desc=A - B (- C)
psi.spellpiece.operatorVectorMultiply=计算: 向量积
psi.spellpiece.operatorVectorDivide=计算: 向量商
psi.spellpiece.operatorVectorDivide.desc=A / B
psi.spellpiece.operatorVectorCrossProduct=计算: 向量交叉积
psi.spellpiece.operatorVectorCrossProduct.desc=A x B
psi.spellpiece.operatorVectorNormalize=计算: 向量规范化
psi.spellpiece.operatorVectorNormalize.desc=规范一个向量使其大小为1
psi.spellpiece.operatorVectorNegate=计算: 共轭向量
psi.spellpiece.operatorVectorNegate.desc=求共轭向量
psi.spellpiece.operatorVectorMagnitude=计算: 向量长度
psi.spellpiece.operatorVectorMagnitude.desc=获取一个向量长度
psi.spellpiece.operatorVectorConstruct=计算: 向量构建
psi.spellpiece.operatorVectorConstruct.desc=在XYZ坐标系中构建向量
psi.spellpiece.operatorVectorExtractX=计算: 向量在X方向坐标
psi.spellpiece.operatorVectorExtractX.desc=提取向量在X方向坐标
psi.spellpiece.operatorVectorExtractY=计算: 向量在Y方向坐标
psi.spellpiece.operatorVectorExtractY.desc=提取向量在Y方向坐标
psi.spellpiece.operatorVectorExtractZ=计算: 向量在Z方向坐标
psi.spellpiece.operatorVectorExtractZ.desc=提取向量在Z方向坐标
psi.spellpiece.operatorVectorProject=计算: 向量投影
psi.spellpiece.operatorVectorProject.desc=将向量A投影到向量B上
psi.spellpiece.operatorVectorDotProduct=计算: 向量点积
psi.spellpiece.operatorVectorDotProduct.desc=A . B
psi.spellpiece.operatorClosestToPoint=计算: 最接近点
psi.spellpiece.operatorClosestToPoint.desc=获取最接近实体列表的一个点
psi.spellpiece.operatorRandomEntity=计算: 随机实体
psi.spellpiece.operatorRandomEntity.desc=从实体列表中获取一个随机实体
psi.spellpiece.operatorListAdd=计算: 添加实体
psi.spellpiece.operatorListAdd.desc=添加目标实体进入实体列表
psi.spellpiece.operatorListRemove=计算: 移除实体
psi.spellpiece.operatorListRemove.desc=从实体列表中移除实体

# -- CONSTANTS
psi.spellpiece.constantNumber=常数: 数字
psi.spellpiece.constantNumber.desc=选择并输入设定值
psi.spellpiece.constantPi=常数: π
psi.spellpiece.constantPi.desc=返回π值
psi.spellpiece.constantWrapper=常数: 子函数
psi.spellpiece.constantWrapper.desc用于统计计算常数的子函数

# -- OTHERS
psi.spellpiece.connector=连接器
psi.spellpiece.connector.desc=连接模块和模块
psi.spellpiece.errorSuppressor=错误抑制
psi.spellpiece.errorSuppressor.desc=禁止由术式引发的错误

# -- TRICKS
psi.spellpiece.trickDebug=术式: Debug
psi.spellpiece.trickDebug.desc=用于测试，打印输出目标
psi.spellpiece.trickDelay=术式: 休眠
psi.spellpiece.trickDelay.desc=延迟法术传递速度
psi.spellpiece.trickDie=术式: 切断
psi.spellpiece.trickDie.desc=停止执行目标范围内法术
psi.spellpiece.trickEvaluate=术式: 评估
psi.spellpiece.trickEvaluate.desc=评估值，不做任何事情
psi.spellpiece.trickAddMotion=术式: 添加动作
psi.spellpiece.trickAddMotion.desc=给指定实体添加动作
psi.spellpiece.trickExplode=术式: 爆炸
psi.spellpiece.trickExplode.desc=来一场猛烈的爆炸吧！
psi.spellpiece.trickBreakBlock=术式: 破坏方块(单体)
psi.spellpiece.trickBreakBlock.desc=破坏指定位置方块
psi.spellpiece.trickBreakInSequence=术式: 破坏方块
psi.spellpiece.trickBreakInSequence.desc=从指定位置沿指定方向破坏方块
psi.spellpiece.trickPlaceBlock=术式: 放置方块(单体)
psi.spellpiece.trickPlaceBlock.desc=在指定位置放置一个方块(在快捷栏选择方块右面的方块)
psi.spellpiece.trickPlaceInSequence=术式: 放置方块
psi.spellpiece.trickPlaceInSequence.desc=从指定位置沿指定方向放置方块(在快捷栏选择方块右面的方块)
psi.spellpiece.trickInfusion=术式: 注魔
psi.spellpiece.trickInfusion.desc=把金注魔成Psi金属
psi.spellpiece.trickBlink=术式: 闪烁
psi.spellpiece.trickBlink.desc=就是闪一下啦
psi.spellpiece.trickMassBlink=术式: 大规模闪烁
psi.spellpiece.trickMassBlink.desc=让每个人都闪一下
psi.spellpiece.trickMassAddMotion=术式: 大规模添加动作
psi.spellpiece.trickMassAddMotion.desc=给实体列表中每一个实体添加一个运动
psi.spellpiece.trickMassExodus=术式: 大规模迁徙
psi.spellpiece.trickMassExodus.desc=将实体列表中每一个实体到目标位置
psi.spellpiece.trickMoveBlock=术式: 移动方块
psi.spellpiece.trickMoveBlock.desc=在坐标方向上移动方块
psi.spellpiece.trickCollapseBlock=术式: 方块坠落
psi.spellpiece.trickCollapseBlock.desc=让一个方块就像沙子一样坠落
psi.spellpiece.trickSmite=术式: 雷公助我
psi.spellpiece.trickSmite.desc=在指定地点召唤闪电
psi.spellpiece.trickBlaze=术式: 火球术
psi.spellpiece.trickBlaze.desc=在指定地点放置火焰
psi.spellpiece.trickTorrent=术式: 凯迪奇
psi.spellpiece.trickTorrent.desc=在指定地点放置水
psi.spellpiece.trickOvergrow=术式: 金坷垃
psi.spellpiece.trickOvergrow.desc=催熟指定地点作物
psi.spellpiece.trickGreaterInfusion=术式: 高端注魔
psi.spellpiece.trickGreaterInfusion.desc=把钻石注魔成Psi水晶
psi.spellpiece.trickEbonyIvory=术式: 黑檀木与白象牙
psi.spellpiece.trickEbonyIvory.desc=注魔煤与石英。仅限在末地
psi.spellpiece.trickSpeed=术式: 香港记者
psi.spellpiece.trickSpeed.desc=获得速度提升效果
psi.spellpiece.trickHaste=术式: 急迫
psi.spellpiece.trickHaste.desc=获得急迫效果
psi.spellpiece.trickStrength=术式: 力量
psi.spellpiece.trickStrength.desc=获得力量效果
psi.spellpiece.trickJumpBoost=术式: 跳跃提升
psi.spellpiece.trickJumpBoost.desc=获得跳跃提升效果
psi.spellpiece.trickWaterBreathing=术式: 水下呼吸
psi.spellpiece.trickWaterBreathing.desc=获得水下呼吸效果
psi.spellpiece.trickFireResistance=术式: 抗火
psi.spellpiece.trickFireResistance.desc=获得抗火效果
psi.spellpiece.trickInvisibility=术式: 隐身
psi.spellpiece.trickInvisibility.desc=获得隐身效果
psi.spellpiece.trickRegeneration=术式: 生命回复
psi.spellpiece.trickRegeneration.desc=获得生命恢复效果
psi.spellpiece.trickResistance=术式: 抗性提升
psi.spellpiece.trickResistance.desc=获得抗性提升效果
psi.spellpiece.trickSlowness=术式: 缓慢
psi.spellpiece.trickSlowness.desc=获得缓慢效果
psi.spellpiece.trickWeakness=术式: 虚弱
psi.spellpiece.trickWeakness.desc=获得虚弱效果
psi.spellpiece.trickWither=术式: 凋零
psi.spellpiece.trickWither.desc=获得凋零效果
psi.spellpiece.trickIgnite=术式: FFF
psi.spellpiece.trickIgnite.desc=将一个实体处于火焰效果中
psi.spellpiece.trickEidosAnchor=术式: 传送锚
psi.spellpiece.trickEidosAnchor.desc=一段时间后将魔法师传送回当前位置
psi.spellpiece.trickEidosReversal=术式: 传送反转
psi.spellpiece.trickEidosReversal.desc=让魔法师瞬间返回
psi.spellpiece.trickSmeltItem=术式: 冶炼
psi.spellpiece.trickSmeltItem.desc=冶炼一个实体
psi.spellpiece.trickSmeltBlock=术式: 冶炼方块
psi.spellpiece.trickSmeltBlock.desc=将一个方块冶炼
psi.spellpiece.trickConjureBlock=术式: 空气墙(单体)
psi.spellpiece.trickConjureBlock.desc=在给定位置召唤一个空气墙
psi.spellpiece.trickConjureLight=术式: 闪耀之光
psi.spellpiece.trickConjureLight.desc=在给定位置召唤一个光源方块
psi.spellpiece.trickConjureBlockSequence=术式: 空气墙
psi.spellpiece.trickConjureBlockSequence.desc=从指定位置沿指定方向放置空气墙

# SPELL PARAMETER NAMES
psi.spellparam.target=目标
psi.spellparam.number=数字
psi.spellparam.number1=数字A
psi.spellparam.number2=数字B
psi.spellparam.number3=数字C
psi.spellparam.number4=数字D
psi.spellparam.vector1=向量A
psi.spellparam.vector2=向量B
psi.spellparam.vector3=向量C
psi.spellparam.vector4=向量D
psi.spellparam.position=坐标
psi.spellparam.ray=光线
psi.spellparam.max=最大值
psi.spellparam.min=最小值
psi.spellparam.power=威力
psi.spellparam.direction=方向
psi.spellparam.speed=速度
psi.spellparam.x=X
psi.spellparam.y=Y
psi.spellparam.z=Z
psi.spellparam.radius=半径
psi.spellparam.distance=距离
psi.spellparam.time=时间
psi.spellparam.list=列表
psi.spellparam.constant=常数

# DATA TYPE NAMES
psi.datatype.Null=无
psi.datatype.Any=任意
psi.datatype.Double=数字
psi.datatype.Integer=数字
psi.datatype.Number=数字
psi.datatype.Vector3=向量
psi.datatype.Entity=实体
psi.datatype.EntityLiving=生物
psi.datatype.EntityLivingBase=生物
psi.datatype.EntityPlayer=玩家与生物
psi.datatype.EntityListWrapper=实体列表

# COMPILER ERRORS
psi.spellerror.nospell=没有法术编辑
psi.spellerror.noname=法术没有名字
psi.spellerror.notricks=法术没有术式
psi.spellerror.unsetparam=一个必要的参数缺失
psi.spellerror.nullparam=一个参数面对一个空单元格
psi.spellerror.invalidparam=一个参数面对一个无效的部件
psi.spellerror.samesideparams=两个以上的参数共用同一侧
psi.spellerror.loop=死循环
psi.spellerror.nonpositivevalue=一个应为正数的参数不为正数
psi.spellerror.noninteger=一个应为整数的数字不为整数
psi.spellerror.nonpositiveinteger=一个应为正整数的数字不为正整数
psi.spellerror.statoverflow=最大数据溢出

# RUNTIME ERRORS
psi.spellerror.dividebyzero=错误：不能除以0
psi.spellerror.nulltarget=错误：法术目标实体不存在
psi.spellerror.nullvector=错误: 法术使用向量不存在或无效
psi.spellerror.outsideradius=错误: 法术目标超出最大半径(32区块)
psi.spellerror.outsidetrigdomain=错误: 值超出反三角函数定义域

# PIECE GROUPS
psi.introduction=Welcome to Psi, the best spell programming magic tech mod in this side of the universe. Please keep in mind that having Just Enough Items (JEI) or some other method of looking up recipes is essential for playing with Psi, as recipes are not included in this guide. In order to get started spellslinging, you'll need some Psidust. To get Psidust, you need to start by crafting a CAD Assembler and an Iron CAD Assembly. Place down the CAD Assembler and put the Iron CAD Assembly in it to construct a very barebones Casting Assistance Device (CAD). From there, drop some Redstone Dust in the world. Equip your CAD, point at the dropped items and right click to make your Psidust.
psi.levelskip=Psi has found save data from a previous world.<br>Would you like to load it?<br><br>If you choose to load it, you'll be taken instantly to Level %d. Otherwise, this message won't show up again this session.
psi.piecegroup.tutorial1=Tutorial 1
psi.piecegroup.tutorial1.desc=Welcome to the leveling menu, it looks like you've gotten acquainted with your brand new CAD. This menu serves as your school for the mod, and this is your first tutorial! Don't worry, this is the longest one, as it has to teach you the basics. To get started programming spells you'll need a Spell Programmer. To run your spells, you'll also need a better CAD than the one you have right now, one with all the components. Look up all the various CAD components (Assembly, Core, Socket, Battery, and optionally, Colorizer) and create one. You don't have to make another Assembly, you can put your current CAD (that is effectively just an Assembly) in your crafting grid to revert it to an Assembly.<br><br>Lastly, Spells also need to be put into Spell Bullets, so make yourself all of that stuff and let's get rolling.<br><br>After you're set with all you need. Open up your Spell Programmer by right clicking it. You'll see a large grid. This is where the magic happens. The programming system is less of a traditionally complex programming system, and more of a simple sequence of actions. To add a piece to the grid, right click any part of it, and select from the pieces that come up.<br><br>As you can see at the bottom, you have two available pieces. Once you have more, you'll be able to assemble them to create spells in a myriad of different ways, but for now, let's just focus on these two. The pieces you have available are the "Selector: Caster" and the "Trick: Debug". Tricks are the most important part of a spell, they are the means through which the spell interacts with the world. In our case, the Debug trick is an exception, as it just writes a value to the player's chat.<br><br>Start off by placing them in your grid adjacent to eachother. When you left click on your "Selector: Caster", you'll find that nothing special happens. However, when you do the same for your "Trick: Debug", a panel appears on the left where you can configure the inputs of this piece, the piece's "parameters". Parameters are info that goes to the piece, in order to allow it to do it's thing. Our Debug trick sends out something to chat, so we need to know what that thing is. Take the Target parameter, and click one of the arrows, so that your "Selector: Caster" looks like it's pointing towards the "Trick: Debug". If you hold Shift while looking at a piece, you can see what types of parameters it needs or what type it sends out. This is useful, so you can pair the right pieces together. Ignore the Number parameter for now, we'll cover it later.<br><br>If you've done this correctly, you should see the X on the top turns into a checkmark, and some values appear on the right. Don't worry about those for now. If you're still seeing the red X, hover over it to see what the error is and try to correct it.<br><br>Now we need to take the program you've made and send it over to your CAD. Grab your Spell Bullet and right click your Spell Programmer with it. You'll hear a beep boop, and are now ready to load the bullet. Place your new CAD into your Assembler, into the big slot on the top-left, and you'll see some slots below it open up. Place your bullet in there, then you can take your CAD out. To pick a spell, hold your CAD and hold the same key you use to access this menu. NOTE: You may only have a single CAD on you. If you have more than one in your inventory, spells will not work.<br><br>In order to level up, you need to create and cast a spell that contains the piece highlighted in red on the last thing you've learned. In our case, we need a spell with a "Trick: Debug" to be able to level up. Right click your CAD with your bullet loaded and you should be ready to move on. If you want to create more Psidust, simply pick a slot that has no bullet in it.
psi.piecegroup.tutorial2=Tutorial 2
psi.piecegroup.tutorial2.desc=Let's talk about the "Number" parameter we saw last time. You'll notice that parameter has an extra option in the center. That means the parameter is optional. By selecting the center, you can disable it.<br><br>In our case, the "Number" parameter is simply a label of sorts, it can be useful if we have a more complex spell where we have multiple things being sent out to chat. It requires a Number, so let's give it one. We now have access to a "Constant: Number" piece. Add the "Number" parameter to your Debug piece and add a "Constant: Number" piece to your grid and connect it to your Debug piece. You can set the number by clicking on the piece and just typing the number with your keyboard.<br><br>Now that we're dealing with multiple parameters, you can assume that in a more complex grid, not everything will be adjacent just as it currently is. That's where Connectors, another piece introduced here, come in. Connectors do exactly as the name says, and allow a piece to connect to another, they're like a wire. You can put a connector adjacent to a piece, and it'll transfer whatever that piece contains to whatever is on the end of the connector. You can make connectors line up with other connectors if what you need is far away. A single connector line can send the object that points to it to any other pieces that are oriented to tap on to it.<br><br>Remember, to level up, you need to make a spell using the piece highlighted in red, so you need to use your "Constant: Number" piece, preferably alongside the Debug trick from Tutorial 1, but give Connectors a try as well, they'll be very important later!
psi.piecegroup.tutorial3=Tutorial 3
psi.piecegroup.tutorial3.desc=Ok, ok. I know what you're thinking. "This is boring, when do we start doing cool stuff?" Well... now!<br><br>It's time we introduce a Trick that actually does some sort of interaction with the world. Bring in "Trick: Add Motion". This trick, as you'd except, adds movement to an entity. It takes an Entity, a Vector and a Number Constant. As you should've figured out already, "Selector: Caster" returns an Entity (Player), which, if you'd use with your new "Trick: Add Motion", you could use it to add movement to your player character. The Vector is the direction in which you want the movement to be added, and the Number Constant is the speed you want to apply. Obviously, you can get this number using "Constant: Number".<br><br>We don't have any great tricks up our sleeve to get a vector for the trick, but we do have "Operator: Entity Look", which gets us a vector corresponding to the direction the player is looking. If we pass that into our "Trick: Add Motion", the player character will move in the direction they're looking. As for the number, go with 3 for now. You can change it of course, but 3 is a good one.You'll notice that when you modify the value of the constant, the numbers on the right change. These numbers are relevant now. They are the stats of your spell. The stats of your spell match up to those of your CAD, and if any of your spell's stats are below the stats of your CAD, you won't be able to cast the spell.<br><br>From the top to bottom, the stats are as follows:<br>&nComplexity&r: The amount of actions your spell has. Constants, connectors and Debug Tricks aren't counted.<br>&nPotency&r: The power of your spell. As you increase the power of your tricks, this goes up.<br>&nCost&r: The amount of Psi (the energy bar on the right of your screen) your spell is going to consume. This doesn't match up to any CAD stat, but is affected by the CAD's Efficiency. The actual value that is consumed is the one inside parenthesis. The higher the Efficiency of your CAD, the less extra you'll have to pay.<br>&nProjection&r: The amount of Tricks in your spell. Debug Tricks aren't counted.<br>&nBandwidth&r: The width or height of your spell, whichever is the highest. If you find you're going over this, try making your spell more compact.
psi.piecegroup.tutorial4=Tutorial 4
psi.piecegroup.tutorial4.desc=Do you like explosions? Of course you do. Let's make a spell that explodes the block the player is looking at.<br><br>For this, we are going to need "Trick: Explode". This takes a Vector and a Number Constant. Similarly to our "Trick: Add Motion", this constant is the power of the trick. The vector is where you want the explosion to happen. We already used "Operator: Entity Look", but that gives us a vector that's very short. If we used that, the explosion would happen in our face! Instead, we want to use an "Operator: Vector Raytrace".<br><br>This operator takes a position and a ray, both Vectors. From the position, which will be the player's position, acquirable through "Operator: Entity Position", the operator extends the "Ray" parameter vector until it collides with a block in the world. Therefore, if we use it alongside "Operator: Entity Look", we can find out where the player is looking at and create our explosion there.One thing we have to keep in mind is the fact that spells are to a range of 32 blocks from their focal point, in our case, the player casting the spell. Our explosion can't be farther than 32 blocks away from the player.<br><br>Lastly, the "Error Suppressor" piece does exactly as it describes. If something goes wrong while casting your spell, you'll get an error in your chat telling you what went wrong. Sometimes that can get annoying, when you know a spell has a possible failiure state. In that case. throw in an "Error Suppressor" anywhere in your spell's grid and all the errors will be gone.<br><br>This will be your last basic tutorial, from here you'll be able to pick between various things to pick as you level up. Have fun!
psi.piecegroup.numbersIntro=Numbers 101
psi.piecegroup.numbersIntro.desc=Numbers are an essential component to Spell Programming. These are basic arithmetic operators that can be used for math in spells.<br><br>If you don't have anything that uses numbers yet, try adding up two constants for a Debug trick.<br><br>Make sure to take note the difference between "Number" and "Number Constant" when holding Shift on any spell piece. A parameter that requires a "Number Constant" can't take a "Number", but a parameter that requires a "Number" can take a "Number" or a "Number Constant". 
psi.piecegroup.vectorsIntro=Vectors 101
psi.piecegroup.vectorsIntro.desc=Vectors are an essential component to Spell Programming. Many vectorial operations here included are very elementary, such as sum or subtraction. The red piece of this set, "Operator: Vector Construct" creates a Vector given the X, Y and Z coordinates. Try using it with "Trick: Add Motion" to make a spell that makes you jump up.<br><br>Regarding another complicated piece in this group: A Cross Product of two vectors is a vector that is perpendicular to both. You can make use of this to get a vector that goes to the player's side, by executing the Cross Product of the player's look vector and (0, 1, 0), which you can get with "Operator: Vector Construct". 
psi.piecegroup.entitiesIntro=Entities 101
psi.piecegroup.entitiesIntro.desc=Entities are an essential component to Spell Programming. While using components like "Selector: Caster" it's possible to get the person casting the spell, the pieces included here allow for targeting other entities in the world.<br><br>You can make use of the pieces here to create spells that affect other entities. Try using it with "Trick: Add Motion" on them instead of yourself.
psi.piecegroup.projectiles=Alternative Casting
psi.piecegroup.projectiles.desc=Aside from the standard Spell Bullets, alternate spell bullets can be created, that allow for spells to be casted in different ways.<br><br>Projectile Spell Bullets, instead of casting the spell straight away, emit a projectile, that casts the spell upon colliding with something. Grenade Spell Bullets function similarly to the Projectile ones, but create a "grenade" style projectile that is affected by gravity and explodes (casting the spell) after 3 seconds of being fired. Charge Spell Bullets work like the Grenade ones, but will only cast the spell when ignited by a Spell Detonator item. Mine Spell Bullets also work like the Grenade ones, and will cast the spell once an entity walks into them and walks out. Circle Spell Bullets create a Spell Circle where the caster is looking, the spell is cast on the position of the spell circle 20 times over the course of 5 seconds.<br><br>The usage of alternative bullets like these requires the introduction of the "Selector: Focal Point" piece, which selects the Focal Point of the spell. For normal Spell Bullets, the Focal Point is the player itself, whereas for Projectile (or any of the derivate) Spell Bullets, the Focal Point is the projectile entity. Naturally, for Circle Spell Bullets, the Focal Point will be the spell circle. "Selector: Caster" always remains unchanged.<br><br>The 32 block limit on spells exists around the Focal Point, so these alternate spell bullets bullets allow for spell effects to happen farther away. Furthermore, a spell can always affect its Caster, even if the Caster is outside the 32 block radius of the Focal Point. The Spell Detonator item can only detonate charges in a 32 block radius.<br><br>The other piece of the group, "Selector: Ruler Vector" is to be used with a Vector Ruler. This item allows you to define a vector in world. Shift-right click a block to set the source and normal right click another to set the destination. When you use the selector, it gets the vector you selected. In the case that you have multiple Vector Rulers on you, the first one is used, hotbar taking priority.
psi.piecegroup.blockWorks=Blockworks
psi.piecegroup.blockWorks.desc=Working with blocks is an essential skill. As blocks are aligned to a grid in the world, you can refer to a block's position via a Vector, so knowledge of the Vector concepts is rather important for understanding the contents of Blockworks.<br><br>Two of the most basic pieces in this group are the "Place Block" and "Break Block" Tricks. They take a Vector and either place, and break a block in the position respective to it. For the case of "Trick: Place Block", the block placed is the one to the right of the player's CAD, on the hotbar. Of course, one of those blocks is taken from the player's inventory. Knowing where to place or break a block is easy, as it can be done through "Operator: Vector Raycast".<br><br>There is something we have to keep in mind, however. A standard implementation of "Operator: Vector Raycast" gives us the block the player is looking at, we can't place a block there, as one already exists! To remedy that, we can combine our "Operator: Vector Raycast" with the new "Operator: Vector Axis Raycast" piece, which gives us a vector equivalent to the side of the block we're looking at, so if we're looking at the top of the block, it'll give us a axial vector (0, 1, 0). We can then sum that, using "Operator: Vector Sum" to the result of our raycast to get where to place our block!<br><br>In a similar fashion, "Operator: Entity Axial Look" gets an axial vector equivalent to the axis the player is looking at. Think of the "Facing" value in your F3 menu. "Operator: Entity Axial Look" does something similar. Say "Facing" would say "east", then "Operator: Entity Axial Look" would get you a vector (1, 0, 0). This, unlike the "Facing" value also detects when you're looking up and down.<br><br>The other two tricks available here are "Trick: Place Block Sequence" and "Trick: Break Block Sequence", the latter being the red piece for this group. These tricks break or place a line of blocks. Similarly to the standard break and place tricks, they require a position to start off, but they also require another Vector, "Target", that defines the line in which it should interact. So if "Target" is (0, 4, 0), it'll place or break 4 blocks up, starting from the value of "Position". The last component to these tricks is "Max", this is a number constant for the maximum amount of blocks the trick is allowed to break or place. Since the vector requirements aren't constant, this works as means of calculating the Potency and Cost of the trick. The higher you set it, the more the spell will cost.<br><br>The last piece in this group is "Operator: Vector Project". Vector Projection is a somewhat complex topic, so this will only explain one of the potential uses for it, that being projecting a vector onto an axis. Imagine you want to make a spell that places blocks from your position in the world to the position you're looking at, but in a straight line aligned to the side of the block you're lookig at (using "Operator: Vector Axis Raycast"). You start off by getting the vector that you want to place blocks on, for using "Trick: Place Block Sequence", but if you're diagonal to the block, you may get something like (3, 2, 4). That's not a straight line! We can use "Operator: Vector Project" to project that into the axis of the side you're looking at, say, (0, 0, 1). So our "Vector A" is (3, 2, 4) and our "Vector B" is (0, 0, 1). Applying the projection leaves us with (0, 0 4). If our "Vector B", was, for example, (1, 0, 0), we'd get (3, 0, 0). For the case where an axial vector is used in B, Vector Projection strips any parts of A that are 0 in B. We can then do our straight line.<br><br>As the red piece in this group is "Trick: Break Block Sequence", you won't need anything too crazy for the most part. Try making a spell that brings down an 8 block high column, so you can "treecapitate".
psi.piecegroup.infusion=Psimetal Infusion
psi.piecegroup.infusion.desc=Psimetal is an important component to creating Casting Assistance Devices with better Psi conduction. The "Trick: Infusion" piece executes a release of psionic energy similar to that of a cast with no bullets, except more concentrated and focused.<br><br>The piece takes no parameters, and functions the exact same manner as infusing Redstone to create Psidust does. To infuse Psimetal, drop Gold Ingots around, and cast a spell with "Trick: Infuse".<br><br>Psimetal can not only be used to create more powerful CAD components, but also to create Spell Drives. Spell Drives function as a method of storing and transporting spells between various Programmer blocks. To write a Spell onto a Spell Drive, simply shift-right click it on the Spell Programmer. After the drive has a spell, doing the same thing will set the spell on the programmer instead. To remove the spell from the drive, shift-right click the air.<br><br>Lastly, Spell Drives can be copied by placing an empty one and a written one together in a crafting grid.  
psi.piecegroup.movement=Movement Advances
psi.piecegroup.movement.desc=Movement and transport is a topic already addressed via the usage of "Trick: Add Motion". This group includes pieces that improve on that concept.<br><br>"Trick: Blink" is the red piece of this group, and all it does is simply teleport the target entity wherever they're looking at forwards by the constant value passed in. A negative value will teleport the entity backwards. "Trick: Mass Blink" does the same as "Trick: Blink", but focused on an Entity List, having all of them be affected by the trick.<br><br>"Trick: Mass Add Motion" is self-explanatory, it's an Entity List version of "Trick: Add Motion", adding the same motion to every entity in the list.<br><br>Lastly, "Trick: Mass Exodus" moves every entity in an Entity List to a given position, with the given speed. Negative speed will move them away.
psi.piecegroup.loopcasting=Loopcasting
psi.piecegroup.loopcasting.desc=Loopcasting is a style of magic defined by the usage of Loopcast Spell Bullets. When a spell is cast from a Loopcast Spell Bullet, it executes as if it was cast from a normal one, but also puts the player into a "loopcasting" state, where, until they unequip their CAD, will continuously cast the same spell at a rate of 4 times a second. The advantage of loopcasting is the fact that the initial cooldown to psi regeneration is only applied on the first spell in full. For each subsequent cast, the cooldown will be much shorter than usual, so, given a caster with a high enough level to sustain psi regeneration to cover the cost of a spell, said spell can be endlessly loopcasted.<br><br>The red piece of this group is "Selector: Loopcast Index". This piece selects the amount of times a spell has been loopcasted. For the initial cast this will be 0, and will be incremented once for every subsequent loopcast. This can be used alongside "Operator: Modulus" and "Operator: Integer Division" to alter how the spell functions every time it's cast.<br><br>"Operator: Integer Division" does exactly as it says on the tin, and executes division of the integer parts of the two numbers. "Operator: Modulus" calculates the remainer of the division of the integer parts of the two numbers. Using these pieces, it's possible to do things such as digging undergound bunkers in any given size.<br><br>"Selector: Loopcast Index" also works with Circle Spell Bullets, returning the amount of times the spell has been cast by the spell circle, up to 20. 
psi.piecegroup.blockMovement=Block Movement
psi.piecegroup.blockMovement.desc=The ability to move blocks isn't as important as the ability to break and place them, but under some cases can come in handy.<br><br>The red piece of this group, "Trick: Move Block" takes a position for a block in the world and moves it given the target vector. The target vector must be axial, if it isn't, the trick will fail.<br><br>The other piece, "Trick: Collapse Block", simply collapses a block as if it were sand or gravel.<br><br>Both these tricks will fail on complex blocks (also known as Tile Entities) or blocks that can't be harvested with Silk Touch.
psi.piecegroup.elementalArts=Elemental Arts
psi.piecegroup.elementalArts.desc=What is a system that allows for manipulation of the world's properties if it didn't include some good old fashioned elemental themed magic?<br><br>This group contains Tricks for the four elements. The red piece of this group is "Trick: Smite", which creates a lightning bolt at the position passed in. The other tricks also do things of the sort.<br><br>The group also contains "Operator: Random", a piece that will generate a random number between 0 (inclusive) and the number passed in (exclusive). This can be used alongside Loopcast or Spell Circle spells in many ways. For example, one can create a spell that would use "Trick: Overgrow" to mass bone meal a plantation.
psi.piecegroup.greaterInfusion=Greater Infusion
psi.piecegroup.greaterInfusion.desc=The ability to infuse Diamonds into Psigems is very important in the progress of spellslinging. Using Psigems, stronger CAD components can be created. Similarly to "Trick: Infusion", "Trick: Greater Infusion" will infuse nearby Diamonds, turning them into Psigems.<br><br>Furthermore, "Trick: Ebony And Ivory" will infuse Coal into an Ebony Substance and Nether Quartz into an Ivory Substance, both of which can be combined with a Psimetal Ingot to create the respective alloy. These alloys can later be used to create stronger CAD Assemblies. "Trick: Ebony And Ivory" can only be used while in the End. 
psi.piecegroup.toolCasting=Tool Casting
psi.piecegroup.toolCasting.desc=Psimetal and Psigems can be crafted into a Toolset: Shovel, Pickaxe, Axe and Sword.<br><br>These tools can be socketed with up to 3 Spell Bullets. When their relative action is executed, that being breaking a block for tools or attacking a mob for the sword, the selected spell is activated. The spell in a Psimetal tool is selected the same way as a CAD. A fourth slot is also shown in the radial menu in case one wants to disable the tool's spells entirely. Psimetal tools will slowly regenerate and restore their damage using the player's Psi energy, in bursts, as long as the tool isn't the item currently in the player's hand.<br><br>Spells in a tool aren't casted by the tool, but rather by the CAD, therefore, the limitations imposed by the CAD's stats still stand.<br><br>This group introduces a few pieces that can be used in conjuction with the tools. The red piece of this group, "Selector: Block Broken" is meant to be used with tools, and gets you a vector respective to where you broke the block in the world. "Selector: Block Broken Side" gets the side in which you broke that block.<br><br>Lastly "Selector: Attack Target" does exactly as it sounds, it gets you the entity you attacked with a sword when the spell is casted. It can also be used with Projectile Spell Bullets, to get the entity that the projectile collided against, if any.
psi.piecegroup.positiveEffects=Positive Effects
psi.piecegroup.positiveEffects.desc=The ability to apply effects to entities is a must of any magical spellbook worth its weight. Luckily, you are not making spells with a spellbook, but you can still apply effects anyway.<br><br>All of the pieces in this group will apply the respective potion effect to the target entity, for the target time (in seconds). If the piece also has a Power parameter, that defines the level of the effect to apply.<br><br>So, for example, "Trick: Speed" with Time 20 and Power 2 would apply a Spell II effect for 20 seconds to the target entity.
psi.piecegroup.negativeEffects=Negative Effects
psi.piecegroup.negativeEffects.desc=As to be expected, after Positive Effects come Negative Effects.<br><br>There isn't much to say here, really. Everything in this group works exactly as expected. Have fun.
psi.piecegroup.exosuitCasting=Exosuit Casting
psi.piecegroup.exosuitCasting.desc=Naturally the method of casting following a tool set would be an armor set. You can create the Psimetal Exosuit using... you guessed it, Psimetal, as well as some Psigems. All the armor pieces of the set can be socketed with bullets, similarly to the Psimetal tools. Each piece handles a given "event", such as taking damage, or jumping. Whenever that event happens, the spell in the selected bullet will be cast.<br><br>The events are as follows:<br>&nHelmet&r: Sensor Based (read on).<br>&nChestplate&r: Player taking damage.<br>&nLeggings&r: Every tick.<br>&nBoots&r: Player jumping.<br><br>The Helmet can have Exosuit Sensors attached to it, by combining the two items in a crafting grid. Only one sensor can be attached at a time. The sensor can be removed by placing the helmet back on the crafting grid. There's a few sensors, such as the Light sensor, that triggers when the player is in low light, or the Stress sensor, that triggers when the player reaches low HP. Check them out at your leisure.<br><br>To control the exosuit, you need to create an Exosuit Controller. This item allows you to modify the selected bullets in each piece directly from your hand. Simply use your typical bullet selection hotkey with it equipped, this brings up a menu with the ability to change multiple slots. Use the left and right mouse buttons to select which item is being changed, it works as usual after that. You can also shift-right click the Exosuit Controller to instantly disable all the effects of your armor.<br><br>Moving on to the pieces. The group contains various selectors you can use to help your Exosuit casting. The red piece of the group is "Selector: Time". This returns the world time, in ticks. It constantly increments. It can be useful if you want to make something that works differently depending on the time. You don't need an exosuit to use it.<br><br>The other two pieces in the group, "Selector: Attacker" and "Selector: Damage Taken" are to be used with the Exosuit Chestplate. The first selects the entity that attacked you, and the second the amount of damage you took.
psi.piecegroup.trignometry=Trigonometry
psi.piecegroup.trignometry.desc=This group includes operators relevant to trigonometric functions. The red piece of this group: "Constant: Pi" is exactly what it says on the tin, a constant that gives you the value of Pi.<br><br>The group includes elementary trigonometric operations: sin, cos, asin and acos. The latter two being the inverse operators of sin and cos, also known as "sin^-1" or "cos^-1".<br><br>Lastly, "Operator: Vector Dot Product" gives you the Dot Product of two vectors, the product of the two vectors' magnitudes and the cosine of the angle between them. Using "Operator: Arc Cosine" on the result will allow you to get the angle between two vectors.
psi.piecegroup.smeltery=Smeltery
psi.piecegroup.smeltery.desc=The pieces included in this group are very simplistic in the way they function, as both revolve around the concept of smelting things into other things as if they were put in a furnace.<br>"Trick: Smelt Item" will smelt a dropped item (Entity) in the world into its smelted counterpart, one item at a time.<br><br>"Trick: Smelt Block" will smelt a block in the world into its smelted version, provided it's also a block. So while Cobblestone may be turned into Stone, Wood can't be turned into Charcoal. 
psi.piecegroup.flowControl=Flow Control
psi.piecegroup.flowControl.desc=Flow Control is a somewhat complex subject. All the pieces here included allow for a spell to function in wildly different manners from what was available in your arsenal before. However, understanding how to properly use these pieces requires knowledge of the very internals of the spellcasting system. There are a few basic rules to be taken in mind to properly understand these concepts:<br>1. Spells execute in the order that the arrows drawn in the Spell Programmer point towards.<br>2. Any given piece's value will only be evaulated once. Any further pieces that require its value will just get the value evaluated the first time. For example, 3 instances of "Trick: Debug" pointing to the same "Operator: Random" will all print out the same value, as the random output will only be evaluted once.<br>3. A piece will only be evaluated when another piece requires its value. These chains are triggered by the Trick pieces.<br>4. Tricks are always executed from left to right and top to bottom. Therefore, a Trick in the second row will always be executed after a trick in the first.<br><br>With that in mind, let's start off with the red piece of this group, "Trick: Sleep". This piece causes the spell to delay any further execution for the amount of ticks passed in. Knowing the order in which tricks execute, thanks to rule 4, putting this in the right place shouldn't be too hard. For those unaware, a Tick is a 1/20 fraction of a second. So if you wish to delay further processing of a spell by half a second, you would use 10 as the "Time" parameter. "Trick: Sleep" does not add any Projection to your spell, but does add Potency.<br><br>"Trick: Evaluate" is a trick that does absolutely nothing. Yes, you heard that right. This trick does nothing. It doesn't increment any stats on your spell either. Its only application is to make use of rule 2, and evaluate a value before a Sleep is executed, allowing you to, for example, get the position where an entity was, with "Selector: Entity Position", before the Sleep is applied, for a trick used after said Sleep.<br><br>"Trick: Die" is a Flow Control piece in the proper sense of the term. It takes a simple Number parameter, and if that number lies between -1 (exclusive) and 1 (also exclusive) it'll stop the spell's execution right then and there. Any other values will have the spell continue as usual. This piece doesn't add Projection. A very simple way to put it to use is to utilize "Selector: Sneak Status", which convinentely gives you 0 if the caster is sneaking and 1 if they're not. Almost as if they were made to go together!<br><br>"Constant: Wrapper" allows you to make use of Number type pieces for tricks that would otherwise require a Number Constant. As you should know by now, the constant value given to a trick allows for calculation of the various stats of the spell before you even cast it, this being the normal reason variable numbers can't be fed into a trick. "Constant: Wrapper" requires two numbers, a constant one and a normal one. The constant value given to the piece will be the one used for any statistical calculation, whereas the normal number will be the one used for when the spell is actually put into use. The normal number's value will be capped out at the value of the constant one during spell execution, to prevent any sort of tomfoolery. The normal number is also always converted to a positive or negative number, depending on the sign of the constant number, so that the signs of both numbers match. If the constant number is 0, the result of this evaluation is always 0, regardless of the value of the normal number.<br><br>Lastly, we have "Operator: Min" and "Operator: Max". These are pretty simple. They, respectively, get the smallest number and the largest number between the various numbers passed in. They can be useful to prevent harder to control variables, such as potentially the result of a "Selector: Loopcast Index" from going above or below a determined value.
psi.piecegroup.blockConjuration=Block Conjuration
psi.piecegroup.blockConjuration.desc=This group includes pieces that do exactly as advertised, they conjure blocks.<br><br>The red piece of the group, "Trick: Conjure Block" creates a Conjured Block at the given position. A Conjured Block is a semi-transparent, physical block that can, optionally, if the "Time" parameter is specified, disappear from the world after a bit. If the "Time" parameter is used, it's specified in Ticks. For those unaware, a Tick is equivalent to 1/20th of a second, so if you want to make a block that disappears after half a second, set "Time" to 10 ticks.<br><br>"Trick: Conjure Light" conjures a light source instead, one that can't be collided against. "Trick: Conjure Block Sequence" functions much like "Trick: Place Block Sequence", but creates Conjured Blocks instead. Both these pieces also include the very same "Time" parameter.<br><br>The color of the Conjured Blocks created is equal to that of the Colorizer used in the CAD (or the default light blue case none is present). Colorizers whose color changes, such as the Full-Spectrum colorizer will also reflect in the visuals of the Conjured Blocks.
psi.piecegroup.eidosReversal=Eidos Manipulation
psi.piecegroup.eidosReversal.desc=Eidos Spells allow for the caster to manipulate the spacetime continuum in their favor.<br><br>The red piece of this group, "Trick: Eidos Reversal" retraces the caster's steps, at double speed, for the amount of time (in seconds) specified. Only one Reversal may be active at a time, and after a Reversal is cast, the effect of any subsequent cast is only available until the point where the last one ended. Sneaking will stop an ongoing Reversal.<br><br>The other piece of the group, "Trick: Eidos Anchor" creates an "anchor" effect on the caster. After the target amount of time (in seconds), the caster will be taken back to where their anchor was. Multiple casts of "Trick: Eidos Anchor" can be done, but only the last one will take effect.
